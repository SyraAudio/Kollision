
/*
    This file was auto-generated by the cmaj VScode extension!
    https://cmajor.dev
*/

// Here's a very simple graph that plays a sine-wave to get you started..
graph Sawtooth  [[ main ]]
{
    input event float gainIn [[name: "Volume", min: -60.0, max: 6.0, init: -25.0, step: 0.01, automatable: true]];
    input event float clipIn [[name: "Distortion", min: 0.0, max: 1.0, init: 0.35, step: 0.001, automatable: true]];

    // Our processor has a single floating point output stream:
    output stream float out;

    // we'll create a sinewave generator node, using the standard library:
    node saw = Kollision::Osc::Sawtooth(220.0f);
    //node saw = std::oscillators::Sine(float, 220.0f);
    node shaper = Kollision::Waveshaper::Tanh();
    node gain = std::levels::SmoothedGain(float, 0.01f);

    node filter = std::filters::butterworth::Processor(
        std::filters::butterworth::Mode::lowPass,
        20000.0f
    );

    node limiter = Kollision::Dynamics::Limiter();

    // and we'll connect the sinewave to our output stream via a fixed
    // gain processor, which will reduce its level to be less annoying:
    
    connection gainIn -> gain.volume;

    connection saw -> gain.in;
    connection gain.out -> filter.in;
    connection filter.out -> limiter -> out;

    // Events
    connection clipIn -> shaper.clipThresholdIn;
}
